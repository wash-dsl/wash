
.. _program_listing_file__mnt_c_Users_scott_OneDrive_Desktop_New_folder_queue.c:

Program Listing for File queue.c
================================

|exhale_lsh| :ref:`Return to documentation for file <file__mnt_c_Users_scott_OneDrive_Desktop_New_folder_queue.c>` (``/mnt/c/Users/scott/OneDrive/Desktop/New folder/queue.c``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include <stdio.h>
   #include <stdlib.h>
   #include "queue.h"
   
   struct queue *create_queue(void){ //creates a queue and returns its pointer
     struct queue *q=(struct queue *)malloc(sizeof(struct queue));
     q->head=NULL;
     q->tail=NULL;
     return(q);
   }
   
   void destroy_queue(struct queue *q){  //destroys the queue and frees the memory
     while(!isempty(q)){
       dequeue(q);
     }
     free(q);
   }
   
   int isempty(struct queue *q){ // checks if queue is empty
     return(q->head==NULL);
   }
   
   void enqueue(struct queue *q, struct job item){ //enqueues a node with an item
     struct node *new_node=(struct node *)malloc(sizeof(struct node));
     new_node->item=item;
     new_node->next=NULL;
     if(isempty(q)){
       q->head=new_node;
       q->tail=new_node;
     }
     else{
       q->tail->next=new_node;
       q->tail=new_node;
     }
   }
   
   void dequeue(struct queue *q){ //dequeues a the head node
     struct node *head_node;
     if(isempty(q)){
       printf("Error: attempt to dequeue from an empty queue");
     }
     else{
       head_node=q->head;
       q->head=q->head->next;
       if(q->head==NULL)
         q->tail=NULL;
       free(head_node);
     }
   }
   
   void printqueue(struct queue *q){
       if(isempty(q)){
           printf("The queue is empty\n");
       }
       else{
           struct node *read_head;
           read_head=q->head;
           printf("The queue elements from head to tail are:\n");
           printf("%d",*(read_head->item.packet));
           while(read_head->next!=NULL){
               read_head=read_head->next;
               printf("--> %d",*(read_head->item.packet));
           }
           printf("\n");
       }
   }
   
   // int main(){
   //     struct queue *work_queue;
   //     work_queue=create_queue();
   //     enqueue(work_queue,2);
   //     enqueue(work_queue,3);
   //     enqueue(work_queue,1);
   //     enqueue(work_queue,1);
   //     printqueue(work_queue);
   //     dequeue(work_queue);
   //     dequeue(work_queue);
   //     printqueue(work_queue);
   //     return 0;
   // }
